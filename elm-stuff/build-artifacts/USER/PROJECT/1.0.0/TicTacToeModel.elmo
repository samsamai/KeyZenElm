Elm.TicTacToeModel = Elm.TicTacToeModel || {};
Elm.TicTacToeModel.make = function (_elm) {
   "use strict";
   _elm.TicTacToeModel = _elm.TicTacToeModel || {};
   if (_elm.TicTacToeModel.values)
   return _elm.TicTacToeModel.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "TicTacToeModel",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var subsequences = function (lst) {
      return function () {
         switch (lst.ctor)
         {case "::": return function () {
                 var st = subsequences(lst._1);
                 return A2($Basics._op["++"],
                 st,
                 A2($List.map,
                 function (x) {
                    return A2($List._op["::"],
                    lst._0,
                    x);
                 },
                 st));
              }();
            case "[]":
            return _L.fromArray([_L.fromArray([])]);}
         _U.badCase($moduleName,
         "between lines 52 and 56");
      }();
   };
   var playerWon = function (player) {
      return function () {
         var fieldsAreInLine = function (fields) {
            return A2($List.all,
            function (_v3) {
               return function () {
                  return _U.eq(_v3.col,1);
               }();
            },
            fields) || (A2($List.all,
            function (_v5) {
               return function () {
                  return _U.eq(_v5.col,2);
               }();
            },
            fields) || (A2($List.all,
            function (_v7) {
               return function () {
                  return _U.eq(_v7.col,3);
               }();
            },
            fields) || (A2($List.all,
            function (_v9) {
               return function () {
                  return _U.eq(_v9.row,1);
               }();
            },
            fields) || (A2($List.all,
            function (_v11) {
               return function () {
                  return _U.eq(_v11.row,2);
               }();
            },
            fields) || (A2($List.all,
            function (_v13) {
               return function () {
                  return _U.eq(_v13.row,3);
               }();
            },
            fields) || (A2($List.all,
            function (_v15) {
               return function () {
                  return _U.eq(_v15.col,
                  _v15.row);
               }();
            },
            fields) || A2($List.all,
            function (_v17) {
               return function () {
                  return _U.eq(_v17.col + _v17.row,
                  4);
               }();
            },
            fields)))))));
         };
         return function ($) {
            return $Basics.not($List.isEmpty($List.filter(fieldsAreInLine)($List.map($List.map($Basics.fst))($List.filter($List.all(function (_v19) {
               return function () {
                  switch (_v19.ctor)
                  {case "_Tuple2":
                     return _U.eq(_v19._1,player);}
                  _U.badCase($moduleName,
                  "on line 72, column 39 to 50");
               }();
            }))($List.filter(function (x) {
               return _U.eq($List.length(x),
               3);
            })(subsequences($)))))));
         };
      }();
   };
   var isFieldEmpty = F2(function (moves,
   field) {
      return A2($List.all,
      function (move) {
         return $Basics.not(_U.eq($Basics.fst(move),
         field));
      },
      moves);
   });
   var moves = function (state) {
      return function () {
         switch (state.ctor)
         {case "FinishedGame":
            return state._1;
            case "NotFinishedGame":
            return state._1;}
         _U.badCase($moduleName,
         "between lines 37 and 39");
      }();
   };
   var NotFinishedGame = F2(function (a,
   b) {
      return {ctor: "NotFinishedGame"
             ,_0: a
             ,_1: b};
   });
   var undoMoves = function (state) {
      return function () {
         switch (state.ctor)
         {case "FinishedGame":
            return state;
            case "NotFinishedGame":
            switch (state._1.ctor)
              {case "[]": return state;}
              return A2(NotFinishedGame,
              state._0,
              $List.drop(2)(state._1));}
         _U.badCase($moduleName,
         "between lines 122 and 126");
      }();
   };
   var FinishedGame = F2(function (a,
   b) {
      return {ctor: "FinishedGame"
             ,_0: a
             ,_1: b};
   });
   var Field = F2(function (a,b) {
      return {_: {},col: a,row: b};
   });
   var Winner = function (a) {
      return {ctor: "Winner"
             ,_0: a};
   };
   var Draw = {ctor: "Draw"};
   var X = {ctor: "X"};
   var initialState = A2(NotFinishedGame,
   X,
   _L.fromArray([]));
   var O = {ctor: "O"};
   var other = function (player) {
      return function () {
         switch (player.ctor)
         {case "O": return X;
            case "X": return O;}
         _U.badCase($moduleName,
         "between lines 30 and 32");
      }();
   };
   var addMove = F2(function (move,
   state) {
      return function () {
         var player = $Basics.snd(move);
         var newMoves = A2($List._op["::"],
         move,
         moves(state));
         return A2(playerWon,
         player,
         newMoves) ? A2(FinishedGame,
         Winner(player),
         newMoves) : _U.eq($List.length(newMoves),
         9) ? A2(FinishedGame,
         Draw,
         newMoves) : A2(NotFinishedGame,
         other(player),
         newMoves);
      }();
   });
   var makeComputerMove = function (state) {
      return function () {
         switch (state.ctor)
         {case "FinishedGame":
            return state;
            case "NotFinishedGame":
            return function () {
                 var fields = _L.fromArray([{_: {}
                                            ,col: 2
                                            ,row: 2}
                                           ,{_: {},col: 1,row: 1}
                                           ,{_: {},col: 3,row: 3}
                                           ,{_: {},col: 1,row: 3}
                                           ,{_: {},col: 3,row: 1}
                                           ,{_: {},col: 1,row: 2}
                                           ,{_: {},col: 2,row: 1}
                                           ,{_: {},col: 2,row: 3}
                                           ,{_: {},col: 3,row: 2}]);
                 var newField = $Maybe.withDefault({_: {}
                                                   ,col: 0
                                                   ,row: 0})($List.head(A2($List.filter,
                 isFieldEmpty(state._1),
                 fields)));
                 var newMoves = A2($List._op["::"],
                 {ctor: "_Tuple2"
                 ,_0: newField
                 ,_1: state._0},
                 state._1);
                 return A2(addMove,
                 {ctor: "_Tuple2"
                 ,_0: newField
                 ,_1: state._0},
                 state);
              }();}
         _U.badCase($moduleName,
         "between lines 90 and 107");
      }();
   };
   var makeHumanAndComputerMove = F2(function (field,
   state) {
      return function () {
         switch (state.ctor)
         {case "FinishedGame":
            return state;
            case "NotFinishedGame":
            return A2(isFieldEmpty,
              state._1,
              field) ? makeComputerMove(A2(addMove,
              {ctor: "_Tuple2"
              ,_0: field
              ,_1: state._0},
              state)) : state;}
         _U.badCase($moduleName,
         "between lines 112 and 117");
      }();
   });
   var processClick = function (_v44) {
      return function () {
         switch (_v44.ctor)
         {case "_Tuple2":
            return function () {
                 var row = 1 + (_v44._1 / 100 | 0);
                 var col = 1 + (_v44._0 / 100 | 0);
                 return _U.cmp(col,
                 1) > -1 && (_U.cmp(col,
                 3) < 1 && (_U.cmp(row,
                 1) > -1 && _U.cmp(row,
                 3) < 1)) ? makeHumanAndComputerMove({_: {}
                                                     ,col: col
                                                     ,row: row}) : $Basics.identity;
              }();}
         _U.badCase($moduleName,
         "between lines 131 and 136");
      }();
   };
   _elm.TicTacToeModel.values = {_op: _op
                                ,O: O
                                ,X: X
                                ,Draw: Draw
                                ,Winner: Winner
                                ,Field: Field
                                ,FinishedGame: FinishedGame
                                ,NotFinishedGame: NotFinishedGame
                                ,other: other
                                ,moves: moves
                                ,initialState: initialState
                                ,isFieldEmpty: isFieldEmpty
                                ,subsequences: subsequences
                                ,playerWon: playerWon
                                ,addMove: addMove
                                ,makeComputerMove: makeComputerMove
                                ,makeHumanAndComputerMove: makeHumanAndComputerMove
                                ,undoMoves: undoMoves
                                ,processClick: processClick};
   return _elm.TicTacToeModel.values;
};