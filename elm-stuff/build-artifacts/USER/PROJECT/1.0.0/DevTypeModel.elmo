Elm.DevTypeModel = Elm.DevTypeModel || {};
Elm.DevTypeModel.make = function (_elm) {
   "use strict";
   _elm.DevTypeModel = _elm.DevTypeModel || {};
   if (_elm.DevTypeModel.values)
   return _elm.DevTypeModel.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "DevTypeModel",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var wordArray = $Array.fromList(_L.fromArray(["rake db:migrate"
                                                ,"rake db:reset"
                                                ,"rails s"
                                                ,"rails c"
                                                ,"binding.pry"
                                                ,"{h:\'a\', i:\'b\'}"]));
   var nextWord = function (current_index) {
      return function () {
         var index = current_index;
         return $Maybe.withDefault("")($Array.get(current_index)(wordArray));
      }();
   };
   var model = {_: {}
               ,current_char: 0
               ,current_word: 0
               ,sample: $Array.fromList($String.toList(nextWord(0)))
               ,typed: $Array.fromList(_L.fromArray([]))};
   var WordState = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,current_char: c
             ,current_word: d
             ,sample: a
             ,typed: b};
   });
   _elm.DevTypeModel.values = {_op: _op
                              ,WordState: WordState
                              ,wordArray: wordArray
                              ,model: model
                              ,nextWord: nextWord};
   return _elm.DevTypeModel.values;
};