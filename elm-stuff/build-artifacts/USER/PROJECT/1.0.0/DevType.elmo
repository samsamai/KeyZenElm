Elm.DevType = Elm.DevType || {};
Elm.DevType.make = function (_elm) {
   "use strict";
   _elm.DevType = _elm.DevType || {};
   if (_elm.DevType.values)
   return _elm.DevType.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "DevType",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var untypedChar = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                          ,_0: "color"
                                                          ,_1: "#EEEEEE"}]));
   var goodChar = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                       ,_0: "color"
                                                       ,_1: "#AAAAAA"}
                                                      ,{ctor: "_Tuple2"
                                                       ,_0: "text-shadow"
                                                       ,_1: "0px 1px 1px #FFF, 0px 2px 2px #FFF"}]));
   var errorChar = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                        ,_0: "color"
                                                        ,_1: "#FF0000"}]));
   var currentChar = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                          ,_0: "border-bottom"
                                                          ,_1: "4px solid #f78d1d"}]));
   var normalChar = $Html$Attributes.style(_L.fromArray([]));
   var word = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                   ,_0: "color"
                                                   ,_1: "#AAA"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "width"
                                                   ,_1: "100%"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "padding"
                                                   ,_1: "0px"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "text-align"
                                                   ,_1: "center"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "margin-left"
                                                   ,_1: "auto"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "margin-right"
                                                   ,_1: "auto"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "word-wrap"
                                                   ,_1: "break-word"}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "text-shadow"
                                                   ,_1: "0px 2px 3px #000"}]));
   var myStyle = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                      ,_0: "width"
                                                      ,_1: "100%"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "height"
                                                      ,_1: "40px"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "padding"
                                                      ,_1: "10px 0"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "font-size"
                                                      ,_1: "2em"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "text-align"
                                                      ,_1: "center"}]));
   var sample_char = F2(function (index,
   model) {
      return function () {
         var char_class = _U.cmp(index,
         model.current_char) > 0 ? normalChar : _U.eq(index,
         model.current_char) ? currentChar : _U.eq(A2($Array.get,
         index,
         model.sample),
         A2($Array.get,
         index,
         model.typed)) ? goodChar : !_U.eq(A2($Array.get,
         index,
         model.sample),
         A2($Array.get,
         index,
         model.typed)) ? errorChar : untypedChar;
         return A2($Html.span,
         _L.fromArray([char_class]),
         _L.fromArray([$Html.text($String.fromChar($Maybe.withDefault(_U.chr(" "))($Array.get(index)(model.sample))))]));
      }();
   });
   var sample_word = function (m) {
      return A2($Html.div,
      _L.fromArray([myStyle]),
      A3($Array.foldr,
      F2(function (x,acc) {
         return A2($List._op["::"],
         A2(sample_char,x,m),
         acc);
      }),
      _L.fromArray([]),
      $Array.fromList(_L.range(0,
      $Array.length(m.sample) - 1))));
   };
   var makeMessage = F3(function (address,
   model,
   str) {
      return A2($Signal.message,
      address,
      {_: {}
      ,current_char: $String.length(str)
      ,sample: model.sample
      ,typed: $Array.fromList($String.toList(str))});
   });
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([word]),
      _L.fromArray([sample_word(model)
                   ,A2($Html.input,
                   _L.fromArray([$Html$Attributes.placeholder("")
                                ,$Html$Attributes.value($String.fromList($Array.toList(model.typed)))
                                ,A3($Html$Events.on,
                                "input",
                                $Html$Events.targetValue,
                                A2(makeMessage,address,model))
                                ,myStyle]),
                   _L.fromArray([]))
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text($Basics.toString(model.current_char))]))]));
   });
   var update = F2(function (new_model,
   old_model) {
      return new_model;
   });
   var model = {_: {}
               ,current_char: 0
               ,sample: $Array.fromList($String.toList("rake db:migrate"))
               ,typed: $Array.fromList(_L.fromArray([]))};
   var WordState = F3(function (a,
   b,
   c) {
      return {_: {}
             ,current_char: c
             ,sample: a
             ,typed: b};
   });
   var main = $StartApp$Simple.start({_: {}
                                     ,model: model
                                     ,update: update
                                     ,view: view});
   _elm.DevType.values = {_op: _op
                         ,main: main
                         ,WordState: WordState
                         ,model: model
                         ,update: update
                         ,view: view
                         ,makeMessage: makeMessage
                         ,sample_word: sample_word
                         ,sample_char: sample_char
                         ,myStyle: myStyle
                         ,word: word
                         ,normalChar: normalChar
                         ,currentChar: currentChar
                         ,errorChar: errorChar
                         ,goodChar: goodChar
                         ,untypedChar: untypedChar};
   return _elm.DevType.values;
};