Elm.KeyElm = Elm.KeyElm || {};
Elm.KeyElm.make = function (_elm) {
   "use strict";
   _elm.KeyElm = _elm.KeyElm || {};
   if (_elm.KeyElm.values)
   return _elm.KeyElm.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "KeyElm",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var actions = $Signal.mailbox({_: {}
                                 ,sample: "rake db:migragte"
                                 ,typed: ""});
   var myStyle = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                      ,_0: "width"
                                                      ,_1: "100%"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "height"
                                                      ,_1: "40px"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "padding"
                                                      ,_1: "10px 0"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "font-size"
                                                      ,_1: "2em"}
                                                     ,{ctor: "_Tuple2"
                                                      ,_0: "text-align"
                                                      ,_1: "center"}]));
   var model = {_: {}
               ,sample: "rake db:migragte"
               ,typed: ""};
   var sendInput = function (str) {
      return $Signal.message(actions.address)({_: {}
                                              ,sample: model.sample
                                              ,typed: str});
   };
   var stringInput = function (model) {
      return A2($Html.input,
      _L.fromArray([$Html$Attributes.placeholder("Text to reverse")
                   ,$Html$Attributes.value(model.typed)
                   ,A3($Html$Events.on,
                   "input",
                   $Html$Events.targetValue,
                   sendInput)
                   ,myStyle]),
      _L.fromArray([]));
   };
   var view = function (model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([stringInput(model)
                   ,A2($Html.div,
                   _L.fromArray([myStyle]),
                   _L.fromArray([$Html.text($Basics.toString(model.sample))]))]));
   };
   var main = A2($Signal.map,
   view,
   actions.signal);
   var WordState = F2(function (a,
   b) {
      return {_: {}
             ,sample: a
             ,typed: b};
   });
   _elm.KeyElm.values = {_op: _op
                        ,WordState: WordState
                        ,model: model
                        ,view: view
                        ,stringInput: stringInput
                        ,sendInput: sendInput
                        ,myStyle: myStyle
                        ,actions: actions
                        ,main: main};
   return _elm.KeyElm.values;
};